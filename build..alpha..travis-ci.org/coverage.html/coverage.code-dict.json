{"/home/travis/build/npmtest/node-npmtest-grunt-html-validation/test.js":"/* istanbul instrument in package npmtest_grunt_html_validation */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-html-validation/lib.npmtest_grunt_html_validation.js":"/* istanbul instrument in package npmtest_grunt_html_validation */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_html_validation = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_html_validation = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-html-validation/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-html-validation && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_html_validation */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_html_validation\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_html_validation.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_html_validation.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_html_validation.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_html_validation.__dirname + '/lib.npmtest_grunt_html_validation.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-html-validation/node_modules/grunt-html-validation/tasks/html_validation.js":"/*\n * grunt-html-validation\n * https://github.com/praveenvijayan/grunt-html-validation\n *\n * Copyright (c) 2013 - 2014 Praveen Vijayan\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function (grunt) {\n\n    var w3cjs = require('w3cjs');\n    var colors = require('colors');\n    var rval = require('./lib/remoteval');\n\n    colors.setTheme({\n        silly: 'rainbow',\n        input: 'grey',\n        verbose: 'cyan',\n        prompt: 'grey',\n        info: 'green',\n        data: 'grey',\n        help: 'cyan',\n        warn: 'yellow',\n        debug: 'blue',\n        error: 'red',\n        blue: 'blue'\n    });\n\n    var counter = 0,\n        msg = {\n            error: 'Something went wrong',\n            ok: 'Validation successful..',\n            start: 'Validation started for.. '.info,\n            networkError: 'Network error re-validating..'.error,\n            validFile: 'Validated skipping..',\n            nofile: ':- No file is specified in the path!',\n            nextfile: 'Skipping to next file..'.verbose,\n            eof: 'End of File..'.verbose,\n            fileNotFound: 'File not found..'.error,\n            remotePathError: 'Remote path '.error + '(options->remotePath) '.grey +\n                             'is mandatory when remote files '.error +\n                             '(options-> remoteFiles) '.grey + 'are specified!'.error\n        },\n        len,\n        reportArry = [],\n        retryCount = 0,\n        reportFilename = '';\n\n    grunt.registerMultiTask('validation', 'HTML W3C validation.', function () {\n        // Merge task-specific and/or target-specific options with these defaults.\n        var options = this.options({\n            path: 'validation-status.json',\n            reportpath: 'validation-report.json',\n            reset: false,\n            proxy: null,\n            stoponerror: false,\n            failHard: false,\n            remotePath: false,\n            maxTry: 3,\n            relaxerror: [],\n            doctype: false, // Defaults false for autodetect\n            charset: false // Defaults false for autodetect\n        });\n\n        var done = this.async(),\n            files = grunt.file.expand(this.filesSrc),\n            flen = files.length,\n            readSettings = {},\n            isRelaxError = false;\n\n        isRelaxError = options.relaxerror.length && options.relaxerror.length !== '';\n\n        var makeFileList = function (files) {\n            return files.map(function (file) {\n                return options.remotePath + file;\n            });\n        };\n\n        //Reset current validation status and start from scratch.\n        if (options.reset) {\n            grunt.file.write(options.path, '{}');\n        }\n\n        if (!flen) {\n            var nomsg = this.data.src;\n            console.log(nomsg + msg.nofile.error);\n        }\n\n        var addToReport = function (fname, status) {\n            var relaxedReport = [];\n\n            for (var i = 0; i < status.length; i++) {\n                if (!checkRelaxError(status[i].message)) {\n                    relaxedReport.push(status[i]);\n                }\n            }\n\n            var report = {};\n            report.filename = fname;\n            report.error = relaxedReport;\n            reportArry.push(report);\n        };\n\n        var wrapfile,\n            wrapfile_line_start = 0;\n        var validate = function (files) {\n            if (files.length) {\n                // fix: Fatal error: Unable to read 'undefined' file (Error code: ENOENT).\n                if (!files[counter]) {\n                    done();\n                    return;\n                }\n\n\n                if (grunt.file.exists(options.path)) {\n                    readSettings = grunt.file.readJSON(options.path);\n                }\n                var currFileStat = readSettings[files[counter]] || false;\n\n                if (currFileStat) {\n                    console.log(msg.validFile.green + files[counter]);\n                    reportFilename = options.remoteFiles ? dummyFile[counter] : files[counter];\n                    addToReport(reportFilename, false);\n                    counter++;\n                    validate(files);\n                    done();\n                    return;\n                }\n\n                if (files[counter] !== undefined) {\n\n                    var filename = options.remoteFiles ? dummyFile[counter] : files[counter];\n\n                    console.log(msg.start + filename);\n                }\n\n                var w3cjs_options = {\n                    //file: files[counter],       // file can either be a local file or a remote file\n                    // file: 'http://localhost:9001/010_gul006_business_landing_o2_v11.html',\n                    output: 'json',             // Defaults to 'json', other option includes html\n                    doctype: options.doctype,   // Defaults false for autodetect\n                    charset: options.charset,   // Defaults false for autodetect\n                    proxy: options.proxy,       // Proxy to pass to the w3c library\n                    callback: function (res) {\n\n                        flen = files.length;\n\n                        if (!res.messages) {\n                            ++retryCount;\n                            var netErrorMsg = msg.networkError + ' ' + retryCount.toString().error + ' ';\n                            if (retryCount === options.maxTry) {\n                                counter++;\n                                if (counter !== flen) {\n                                    netErrorMsg += msg.nextfile;\n                                } else {\n                                    netErrorMsg += msg.eof;\n                                }\n                                retryCount = 0;\n                            }\n\n                            console.log(netErrorMsg);\n                            validate(files);\n                            return;\n                        }\n\n                        len = res.messages.length;\n\n                        var setGreen = function () {\n                            readSettings[files[counter]] = true;\n                            grunt.log.ok(msg.ok.green);\n\n                            reportFilename = options.remoteFiles ? dummyFile[counter] : files[counter];\n                            addToReport(reportFilename, false);\n                        };\n\n                        if (len) {\n                            var errorCount = 0,\n                                prop;\n\n                            for (prop in res.messages) {\n                                res.messages[prop].unwrapLine = res.messages[prop].lastLine - wrapfile_line_start;\n                            }\n\n                            for (prop in res.messages) {\n                                var chkRelaxError;\n                                if (isRelaxError) {\n                                    chkRelaxError = checkRelaxError(res.messages[prop].message);\n                                }\n\n                                if (!chkRelaxError) {\n                                    errorCount = errorCount + 1;\n\n                                    var lineNumber = ' Line no: ' + JSON.stringify(options.wrapfile ? res.messages[prop].unwrapLine : res.messages[prop].lastLine);\n                                    if (typeof(prompt) !== 'undefined') {\n                                        lineNumber = lineNumber.prompt;\n                                    }\n\n                                    console.log(errorCount + '=> '.warn + JSON.stringify(res.messages[prop].message).help + lineNumber );\n                                }\n\n                            }\n\n                            if (errorCount !== 0) {\n                                console.log('No of errors: '.error + errorCount);\n                            }\n\n                            readSettings[files[counter]] = false;\n                            reportFilename = options.remoteFiles ? dummyFile[counter] : files[counter];\n                            addToReport(reportFilename, res.messages);\n\n                            if (options.stoponerror) {\n                                done();\n                                return;\n                            }\n\n                            if (isRelaxError && errorCount === 0) {\n                                setGreen();\n                            }\n\n                        } else {\n\n                            setGreen();\n\n                        }\n\n                        grunt.file.write(options.path, JSON.stringify(readSettings));\n                        // depending on the output type, res will either be a json object or a html string\n                        counter++;\n\n                        if (counter === flen) {\n                            if (options.reportpath) {\n                                grunt.file.write(options.reportpath, JSON.stringify(reportArry));\n                                console.log('Validation report generated: '.green + options.reportpath);\n                            }\n                            if (options.failHard) {\n                                var validationErrCount = reportArry.reduce(function (sum, report) {\n                                    return sum + report.error.length;\n                                }, 0);\n                                if (validationErrCount > 0) {\n                                    grunt.fail.warn(validationErrCount + ' total unignored HTML validation error' + grunt.util.pluralize(validationErrCount, '/s') + '.');\n                                }\n                            }\n                            done();\n                            if (!options.remoteFiles) {\n                                return;\n                            }\n                        }\n\n                        if (options.remoteFiles) {\n                            if (counter === flen) {\n                                return;\n                            }\n\n                            rval(dummyFile[counter], function () {\n                                validate(files);\n                            });\n\n                        } else {\n                            validate(files);\n                        }\n                    }\n                };\n\n                if (options.wrapfile) {\n                    if (!wrapfile) {\n                        wrapfile = grunt.file.read(options.wrapfile);\n                        wrapfile_line_start = wrapfile.substring(0, wrapfile.indexOf('<!-- CONTENT -->')).split('\\n').length - 1;\n                    }\n\n                    w3cjs_options.input = wrapfile.replace('<!-- CONTENT -->', grunt.file.read(files[counter]));\n                } else {\n                    w3cjs_options.file = files[counter];\n                }\n\n                // override default server\n                if (options.serverUrl) {\n                    w3cjs.setW3cCheckUrl(options.serverUrl);\n                }\n\n                w3cjs.validate(w3cjs_options);\n            }\n        };\n\n        function checkRelaxError(error) {\n            for (var i = 0, l = options.relaxerror.length; i < l; i++) {\n                var re = new RegExp(options.relaxerror[i], 'g');\n                if (re.test(error)) {\n                    return true;\n                }\n            }\n        }\n\n        /* Remote validation\n         * Note on Remote validation.\n         *  W3Cjs supports remote file validation but due to some reasons it is not working as expected.\n         *  Local file validation is working perfectly. To overcome this remote page is fetch using 'request'\n         *  npm module and write page content in '_tempvlidation.html' file and validates as local file.\n         */\n\n        if (!options.remotePath && options.remoteFiles) {\n            console.log(msg.remotePathError);\n            return;\n        }\n\n        if (options.remotePath && options.remotePath !== '') {\n            files = makeFileList(files);\n        }\n\n        if (options.remoteFiles) {\n\n            if (typeof options.remoteFiles === 'object' && options.remoteFiles.length && options.remoteFiles[0] !== '') {\n                files = options.remoteFiles;\n\n            } else {\n                files = grunt.file.readJSON(options.remoteFiles);\n            }\n\n            files = makeFileList(files);\n\n            var dummyFile = files;\n\n            files = [];\n\n            for (var i = 0; i < dummyFile.length; i++) {\n                files.push('_tempvlidation.html');\n            }\n\n            rval(dummyFile[counter], function () {\n                validate(files);\n            });\n\n            return;\n        }\n\n        if (!options.remoteFiles) {\n            validate(files);\n        }\n\n    });\n\n};\n"}